Brad Sherman
Fundamentals of Computing 1
Lab 8 Part 2 Report

From the user's perspective, they watch a green pivot go back and forth from a bar on the top of the screen. A pendulum hangs from the green pivot, and swings back and forth. The ride never goes outside of the window, and the pendulum also elongates and shrinks in length. At the bottom of the pendulum is a square with four buckets for people to sit in, and the square rotates while it is swinging back and forth and sliding back and forth. The user can press 'q' at any time to quit and 'p' at anytime to pause the animation.

Internally, the program starts by initializing a struct called Object which is used as the basis for all the different parts of the ride. The struct has a x and y position, a speed, x and y speed, a size, and a theta. Not all of these elements are used for each object, and some of the elements are similar (speed, xspeed, and yspeed), but I thought that having one general struct type that can be applied to all objects would be better. Then the program declares all my functions. Once the program enters main, it generates a random seed based on the time, and then initializes numerous variables for the objects and other aspects of the program like the wait time and the size of the window. Then it opens the window and enters the while loop that generates the ride. At each iteration of the while loop, the program clears the window, and then sets the background colors before calling the first function. After it calls the function to draw the pivot, it updates different theta values for the moving objects. Then the output is flushed to the screen. If the user presses 'q', the program exits the while loop and if the user presses 'p', the program executes a gfx_wait so that the animation pauses. 

Once the draw_pivot function is called, it determines the location of the pivot, and then it calls the draw_pendulum function based on that position. After that it draws the pivot so that the pendulum does not appear in front of the pivot. In the draw_pendulum function, it determines the x and y position of the bottom of the pendulum, and then enters a series of if statements to make sure that the structure never leaves the window. Then a line is drawn from the x and y position of the pivot to the x and y position of the pendulum. Lastly, the draw_base function is called. Inside the draw_base function, a for loop determines the four corners of the square, and draws the four sides of the square. It also stores the positions of the corners so that after the square is drawn, the buckets can be drawn on top of the square using the draw_buckets function, which is self-explanatory. All of the functions are chained together using the position of the previous object as requested in the lab description. 

I checked and verified that this program is correct by running it numerous times to ensure that the animation ran smoothly and the carnival ride worked the way I wanted it to. The four axes of motion required are the linear movement of the pivot, the rotation of the square, the linear movement of the changing length of the pendulum, and the swinging of the pendulum.
