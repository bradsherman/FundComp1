Brad Sherman
Fundamentals of Computing 1
Lab 9 Report

From the user perspective, they open the program to see a blank black screen. They can press any number from 1-8 to see a different fractal and 'q' to quit. For gallery.c, the user immediately sees 20 trees of random sizes and colors, and they can click to give a new random color and position to each tree. Internally, the program starts by initializing all the necessary variables, including a 'buff' variable which is used to keep some of the drawings away from the edge of the screen. The program opens the window and enters a while loop where the variable 'c' is switched. Depending on what number is pressed between 1 and 8 dictates which function is called. The initial parameters were determined through trial and error, and the constants inside each of the functions were as well. Sierpinski was given to us, and uses the draw_triangle function I created. Shrinking_squares uses a draw_square function and decreases the size of the squares by one half the length of the side each time until the length is less than 4. Spiral_squares also used the draw_square function, and draws a square a distance of the radius away and then draws a square centered at that point with a center to corner length of the radius/4. Then it moves by PI/6 radians. Circular_lace just draws 6 circles on the previous circle that are 1/3 in radius until the radius is less than 2. Snowflake draws lines from a center point every 2PI/5 radians, and then recursively calls itself at the end of those lines until the length is less than 2. Tree draws a line straight up starting at the bottom of the page and then splits at an angle of PI/6 on each side of the original line until the length is less than 2. Fern also starts at the bottom and draws a line up 4 times the length, and at each interval of length calls itself with an angle of PI/6 on either side until the length is less than 3. Spirals uses similar code to spiral_squares, but calculates two points on the spiral and draws a line between them, and then recursively calls itself at those two points, as well as at the center point with a new angle so as to continue the spiral, until the length is less than 1. I verfiied that the output of my program is correct by comparing it to the pictures in the lab and making sure they looked similar, while double checking that I used recursion correctly as well.

In gallery.c, I created a struct Tree that has x and y position along with
size and angle, and made an array of Tree structs of size 20. Then I used for
loops along with simple random functions to give initial values to each struct in the array and draw them. Each time the user presses a button or clicks the x position, color, and size of each tree is updated so it gives the effect of moving and changing trees. I verified this program by making sure all the trees looked just like the one in my fractals.c program. 
